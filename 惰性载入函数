因为浏览器之间行为的差异，多数JavaScript代码包含了大量的if语句，将执行引导到正确的代码中。例如Ajax 创建XHR对象的过程。
如果if语句不必每次执行，那么代码可以运行地更快些。解决方案就是惰性载入的技巧。
惰性载入表示函数执行的分支仅会执行一次。有两种实现的方式：
（1）在函数被调用时再处理函数，在第一次调用的过程中，该函数会被覆盖为另外一个按合适方式执行的函数，
这样任何对原函数的调用都不用再经过执行的分支了。
（2）在声明函数时就指定适当的函数。这样，第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一点性能。
